{"version":3,"sources":["js/timer.js","index.js"],"names":["getTimeComponents","time","days","pad","Math","floor","hours","mins","secs","value","String","padStart"],"mappings":";;;AAAA,SAASA,EAAkBC,GAuBhB,MAAA,CAACC,KAlBK,KAAKC,IAAIC,KAAKC,MAAMJ,EAAQ,QAkB3BK,MAZA,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,MAAyB,OAY/CM,KAPR,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MAOnCO,KAFd,KAAKL,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,OAK1D,SAASE,EAAIM,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG;;AC1BrC,aADA,QAAA,oBACA,QAAA","file":"src.2dfd99fb.js","sourceRoot":"../src","sourcesContent":["function getTimeComponents(time) {\n    /*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    /*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    /*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    /*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return {days, hours, mins, secs };\n  }\n\n  function pad(value) {\n    return String(value).padStart(2, '0');\n  }\n\n \n","import './sass/main.scss';\nimport './js/timer'\n"]}